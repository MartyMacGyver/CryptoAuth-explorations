/*! \mainpage ATECC108 Library Source Code
    \section intro_sec Introduction
    This library enables a user to more quickly implement an application
    that uses an Atmel CryptoAuthentication ATECC108 device.
    
    The library is distributed as source code. It is licensed according to
    terms of the included license agreement, which the user agreed to during
    the installation process.
    
    The code comes in three layers, 
    Command Marshaling, Communication and Physical layer.
    
    The Command Marshaling layer assembles command packets from
    marshaling function parameters, sends them to the device, and returns
    the response from the device. This library is derived from the library 
    for the ATSHA204 device. Currently,	it provides only the ATSHA204 subset 
    of command wrapper functions.
    
    The Communication layer handles communication sequences 
    (wake up, send command, receive response, sleep). It retries such
    sequences in case of certain communication failures.
    
    The Physical layer puts the command packets on the chosen interface
    bus, and reads responses from it. 

    The library does not yet support the Alternate Single Wire Interface 
    (ROM commands).
    
    \section gettingstarted_sec Getting Started
    The user should be able to use most of the library as is, simply
    adding the library modules into her C project. 
    Functions in the Physical layers will have to be modified or
    re-written if the processor is not an eight-bit AVR. Starting values for
    timeout loop counters and timer routines have to be adjusted.
    
    To start development, add the library files to your project,
    modify / implement the functions in the Physical layer modules,
    and supply values for the timeout loop counters that match
    the execution time of your CPU (and the I2C clock if you are using I2C).
    
    \section waystotalk_sec ATECC108 Communication Interfaces
    The ECC108 device can be configured to either communicate in SWI 
    or I2C mode. If the device is configured for single wire communication
    you can use either a UART or GPIO peripheral:  
    <ul>
      <li>
          The chip will communicate with a UART (or USART) at 230.4 kBaud.
          No driver chip is required (as in RS-232 or RS-285), the chip will 
          talk directly to the UART pins.
      </li>
      <li>    
          The chip will communicate with a soft UART, or a "big-banged" pin, at
          the same speed.
          
          Be aware that the actual baud-rate of the ATECC108 is the baud-rate divided 
          by 9 (1 start bit, 7 data bits, 1 stop bit). One UART byte is one bit of 
          information read from or written to the device. Therefore, the actual data 
          through-put is 230,400 baud / 9 = 25,600 baud.
      </li>
      <li>    
          If the device is configured for I2C communication the device
          will communicate using the standard I2C protocol (also known as
          two-wire interface or TWI) at speeds of up to 1 MHz.
      </li>
    </ul>

    Early versions of the SWI device need the command flag to be longer than 500 &mu;s.
    The library achieves this by sending a dummy flag of 0 before sending the
    command flag.

    With the distribution of this library example projects are provided for all methods.
*/